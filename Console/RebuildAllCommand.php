<?php
namespace InfinityRedux\UrlOverride\Console;
use Exception;
use InfinityRedux\UrlOverride\Operations\GenerateMissingCategoryPerStoreOperation;
use InfinityRedux\UrlOverride\Operations\RemoveDuplicatedCategoryOperation;
use InfinityRedux\UrlOverride\Operations\RemoveDuplicatedProductOperation;
use InfinityRedux\UrlOverride\Operations\RemoveCategorySuffixInsideProductOperation;
//use InfinityRedux\UrlOverride\Operations\RemoveObsoleteCategoryOperation;
use InfinityRedux\UrlOverride\Operations\RemoveSuffixUrlPathOperation;
use Magento\Framework\App\Area;
use Magento\Framework\Exception\LocalizedException;
use RuntimeException;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;


class RebuildAllCommand extends AbstractRebuildCommand
{
    protected function configure()
    {
        $this->setName('infinityredux:rebuild:all');
        $this->setAliases(['ir:rebuild:all']);
        $this->setDescription('Rebuild the url rewrites for products and categories.');
        $this->setHelp(
            'Performs multiple (low level) database operations to ensure ' .
            'that all existing url rewrites are correct (either altering or ' .
            'removing any that are not) and then create any that are missing. ' .
            'This includes carrying out suffix modifications according to the ' .
            'current module configuration.'
        );
    }

    protected function execute(InputInterface $input, OutputInterface $output): int
    {
        if (!$this->generalConfig->isEnabled())
        {
            $message = 'Url override is not currently enabled.';
            $this->handleError($message, $output);
            return 25;
        }

        if (    !$this->generalConfig->isProductEnabled()
            or  !$this->generalConfig->isCategoryEnabled())
        {
            $message = 'Updating all urls requires both product and category to be enabled.';
            $this->handleError($message, $output);
            return 25;
        }

        if (    $this->seoConfig->isCategorySuffixActive()
            or  $this->seoConfig->isProductSuffixActive())
        {
            $message = 'Magento suffix is not empty.';
            $this->handleError($message, $output);
            return 25;
        }

        try {
            $this->state->setAreaCode(Area::AREA_ADMINHTML);
            $connection = $this->getConnection();
        }
        catch (LocalizedException $e) {
            $message = 'Unable to update state, before processing begins.';
            $this->handleError($message, $output, $e);
            return 50;
        }
        catch (RuntimeException $e) {
            $message = 'Unable to obtain database connection.';
            $this->handleError($message, $output, $e);
            return 50;
        }

        $this->writeTitle('Rebuilding All Url Rewrites...', $output);

        $connection->beginTransaction();
        try {
            $path           = RemoveSuffixUrlPathOperation::execute($this->context, $connection);
            $autoCategory   = RemoveCategorySuffixInsideProductOperation::execute($this->context, $connection);
            $autoProduct    = RemoveCategorySuffixInsideProductOperation::execute($this->context, $connection);
            $dupCategory    = RemoveDuplicatedCategoryOperation::execute($this->context, $connection);
            $dupProduct     = RemoveDuplicatedProductOperation::execute($this->context, $connection);
            $inside         = RemoveCategorySuffixInsideProductOperation::execute($this->context, $connection);

            $connection->commit();
            $this->writeBlock([
                'Processing existing rewrites to remove suffixes.',
                "Updated $path path records",
                "Updated $autoCategory autogenerated category rewrite records.",
                "Updated $autoProduct autogenerated product rewrite records.",
                "Updated $dupCategory duplicated category rewrite records.",
                "Updated $dupProduct duplicated product rewrite records.",
                "Updated $inside category-prefix product redirect records.",
            ], $output);
        }
        catch (Exception $e) {
            $connection->rollBack();
            $message = 'Error while processing existing rewrites.';
            $this->handleError($message, $output, $e);
            return 99;
        }

        $connection->beginTransaction();
        try {
//            RemoveObsoleteCategoryOperation::execute($this->context, $connection);
            $missingCategory = GenerateMissingCategoryPerStoreOperation::execute($this->context, $connection);

            $connection->commit();
            $this->writeBlock([
                'Processing store level redirects.',
//                "Deleted 0 obsolete category store redirects.",
//                "Deleted 0 obsolete product store redirects.",
                "Created $missingCategory missing category store redirects.",
                "Created 0 missing product store redirects.",
            ], $output);
        }
        catch (Exception $e) {
            $connection->rollBack();
            $message = 'Error while creating new rewrites.';
            $this->handleError($message, $output, $e);
            return 99;
        }


        return 0;
    }
}
